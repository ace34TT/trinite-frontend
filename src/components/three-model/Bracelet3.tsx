/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Bracelet-with-diamond.glb --transform --types
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useSelector } from "react-redux";
import { RootState } from "../../redux/store";
import { useWindowSize } from "react-use";
import { useFrame } from "react-three-fiber";

type GLTFResult = GLTF & {
  nodes: {
    Diamond: THREE.Mesh;
    Circle009_1: THREE.Mesh;
    Circle009_2: THREE.Mesh;
    Circle009_3: THREE.Mesh;
    Circle009_4: THREE.Mesh;
  };
  materials: {
    ["Dispersive diamond"]: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
    ["Scratched Gold"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "models/final-result/model-3/Bracelet-with-diamond-transformed.glb"
  ) as GLTFResult;
  const rotation = useSelector((state: RootState) => state.rotation);
  const [scale, setScale] = useState(3.5);
  const { width } = useWindowSize();
  const groupRef = useRef<THREE.Group>(null);
  useEffect(() => {
    if (width < 768) {
      setScale(0.1);
    } else {
      setScale(0.15);
    }
  }, [width]);

  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.01;
    }
  });

  useFrame(({ mouse }) => {
    const { y } = mouse;
    if (groupRef.current) {
      groupRef.current.rotation.x = y * Math.PI * -0.1;
    }
  });
  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        geometry={nodes.Diamond.geometry}
        material={materials["Dispersive diamond"]}
        position={[0, -0.2, 0]}
        rotation={[rotation.x, rotation.y, rotation.z]}
        scale={scale}
      />
      <group
        position={[0, -0.2, 0]}
        rotation={[rotation.x, rotation.y, rotation.z]}
        scale={scale}
      >
        <mesh
          geometry={nodes.Circle009_1.geometry}
          material={materials.Material}
        />
        <mesh
          geometry={nodes.Circle009_2.geometry}
          material={materials["Scratched Gold"]}
        />
        <mesh
          geometry={nodes.Circle009_3.geometry}
          material={materials["Scratched Gold"]}
        />
        <mesh
          geometry={nodes.Circle009_4.geometry}
          material={materials["Scratched Gold"]}
        />
      </group>
    </group>
  );
}

useGLTF.preload(
  "models/final-result/model-3/Bracelet-with-diamond-transformed.glb"
);
