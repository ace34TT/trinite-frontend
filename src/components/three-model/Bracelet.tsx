/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Bracelet-compressed.glb --types
*/

import { forwardRef, useEffect, useRef, useState } from "react";
import { useCubeTexture, useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "react-three-fiber";
import { useWindowSize } from "react-use";
import { useSelector } from "react-redux";
import { RootState } from "../../redux/store";
import { MeshStandardMaterial } from "three";

type GLTFResult = GLTF & {
  nodes: {
    Circle001: THREE.Mesh;
    Circle001_1: THREE.Mesh;
    Circle001_2: THREE.Mesh;
  };
  materials: {
    ["Scratched Gold"]: THREE.MeshStandardMaterial;
  };
};
export const Model = forwardRef((props, ref) => {
  const [scale, setScale] = useState(3.5);
  const { width } = useWindowSize();
  const { nodes, materials } = useGLTF(
    "models/model-1/Bracelet-Gold-transformed.glb"
  ) as GLTFResult;
  const groupRef = useRef<THREE.Group>(null);
  //

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group position={[0, -0.2, 0]} rotation={[1.8, 0, 1.2]} scale={scale}>
        <mesh
          geometry={nodes.Circle001.geometry}
          material={materials["Scratched Gold"]}
          // material={reflectiveMaterial}
        />
        <mesh
          geometry={nodes.Circle001_1.geometry}
          material={materials["Scratched Gold"]}
        />
        <mesh
          geometry={nodes.Circle001_2.geometry}
          material={materials["Scratched Gold"]}
        />
      </group>
    </group>
  );
});

useGLTF.preload("models/model-1/Bracelet-Gold-transformed.glb");
