/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Bracelet-compressed.glb --types
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Group } from "three";
import { useFrame } from "react-three-fiber";

type GLTFResult = GLTF & {
  nodes: {
    Circle002: THREE.Mesh;
  };
  materials: {
    ["Scratched Gold"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "models/final/Bracelet-compressed.glb"
  ) as GLTFResult;

  const groupRef = useRef<Group>(null);
  const rotationSpeed = 0.1;

  useFrame(({ clock }) => {
    if (groupRef.current) {
      groupRef.current.rotation.y += rotationSpeed * clock.getDelta(); // increment rotation angle by a fixed amount
      if (groupRef.current.rotation.y > Math.PI * 2) {
        groupRef.current.rotation.y -= Math.PI * 2; // wrap the angle to keep it within 0 to 2*PI range
      }
    }
  });

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        geometry={nodes.Circle002.geometry}
        material={materials["Scratched Gold"]}
        position={[0, 0, 0]}
        rotation={[1.55, 0, 0]}
        scale={2.5}
      />
    </group>
  );
}

useGLTF.preload("models/final/Bracelet-compressed.glb");
